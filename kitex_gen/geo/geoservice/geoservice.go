// Code generated by Kitex v0.6.1. DO NOT EDIT.

package geoservice

import (
	"context"
	geo "github.com/baoyxing/geo-rpc/kitex_gen/geo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return geoServiceServiceInfo
}

var geoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GeoService"
	handlerType := (*geo.GeoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetLocation": kitex.NewMethodInfo(getLocationHandler, newGeoServiceGetLocationArgs, newGeoServiceGetLocationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "geo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getLocationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*geo.GeoServiceGetLocationResult)
	success, err := handler.(geo.GeoService).GetLocation(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGeoServiceGetLocationArgs() interface{} {
	return geo.NewGeoServiceGetLocationArgs()
}

func newGeoServiceGetLocationResult() interface{} {
	return geo.NewGeoServiceGetLocationResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetLocation(ctx context.Context) (r *geo.Location, err error) {
	var _args geo.GeoServiceGetLocationArgs
	var _result geo.GeoServiceGetLocationResult
	if err = p.c.Call(ctx, "GetLocation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
